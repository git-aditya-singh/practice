//maxsum contigous sub array or kadane algo

public int maxSubArray(final List<Integer> a) {
        int maxsum=-(int)1e9;
        int s=0;
        for(int i=0;i<a.size();i++){
        s+=a.get(i);
        maxsum=Math.max(s,maxsum);
        if(s<0)
        {
            s=0;
        }
            
        }
        return maxsum;
    }
 
 //spiral order matrix 1=================================
 
 public ArrayList<Integer> spiralOrder(final List<ArrayList<Integer>> a) {
    ArrayList<Integer>ans=new ArrayList<>();
    int minr=0;
    int minc=0;
    int maxr=a.size()-1;
    int maxc=a.get(0).size()-1;
    int te=(maxr+1)*(maxc+1);
    while(te>0){
      for(int i=minr,j=minc;j<=maxc && te>0;j++){
          ans.add(a.get(i).get(j));te--;
      }
      minr++;

      for(int i=minr,j=maxc;i<=maxr && te>0;i++){
          ans.add(a.get(i).get(j));te--;
      }
      maxc--;
      for(int i=maxr,j=maxc;j>=minc && te>0;j--){
          ans.add(a.get(i).get(j));te--;
      }
      maxr--;
      
      for(int i=maxr,j=minc;i>=minr && te>0;i--){
          ans.add(a.get(i).get(j));te--;
      }
      minc++;

    }
    return ans;
    }

//permutations===========================================================================


public ArrayList<ArrayList<Integer>> permute(ArrayList<Integer> a) {
        ArrayList<ArrayList<Integer>>ans=new ArrayList<>();    
        boolean[]vis=new boolean[a.size()];
        helper(a , new ArrayList<>() , vis , ans);
        return ans;
         
    }
    public static void helper(ArrayList<Integer> a,ArrayList<Integer>sans,boolean[]vis,ArrayList<ArrayList<Integer>>ans){
        if(sans.size()==a.size()){
            ArrayList<Integer> myAns = new ArrayList<>(sans);
            ans.add(myAns);
            return;
        }
        for(int j=0;j<a.size();j++){
            if(!vis[j]){
            vis[j]=true;
            sans.add(a.get(j));
            helper(a,sans,vis,ans);
            sans.remove(sans.size()-1);
            vis[j]=false;
            }
        }
        
    }

//unique permutations==========================================================================

public ArrayList<ArrayList<Integer>> permute(ArrayList<Integer> a) {
        ArrayList<ArrayList<Integer>>ans=new ArrayList<>();    
        boolean[]vis=new boolean[a.size()];
        helper(a , new ArrayList<>() , vis , ans);
        return ans;
         
    }
    public static void helper(ArrayList<Integer> a,ArrayList<Integer>sans,boolean[]vis,ArrayList<ArrayList<Integer>>ans){
        if(sans.size()==a.size()){
            ArrayList<Integer> myAns = new ArrayList<>(sans);
            if(ans.contains(myAns)){
                return;
            }
            ans.add(myAns);
            return;
        }
        for(int j=0;j<a.size();j++){
            if(!vis[j]){
            vis[j]=true;
            sans.add(a.get(j));
            helper(a,sans,vis,ans);
            sans.remove(sans.size()-1);
            vis[j]=false;
            }
        }
        
    }

//search for a range========================================================================================

public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public ArrayList<Integer> searchRange(final List<Integer> A, int B) {
        int li=0;
        int ri=A.size()-1;
        int idx=findindex(li,ri,B,A);
        if(idx==-1){
            ArrayList<Integer>aaa=new ArrayList<>();
            aaa.add(-1);
            aaa.add(-1);
            return aaa;
        }
        li=idx;
        ri=idx;
        int []ans=new int[2];
        ans[0]=idx;
        ans[1]=idx;
        while((li>=0&&A.get(li)==B)||(ri<A.size()&&A.get(ri)==B)){
            if(li>=0&&A.get(li)==B){
                ans[0]=li;
                li--;
            }
            if(ri<A.size()&&A.get(ri)==B){
                ans[1]=ri;
                ri++;
            }
        }
        ArrayList<Integer>a= new ArrayList<>();
        a.add(ans[0]);
        a.add(ans[1]);
        return a;
    }
    public static int findindex(int li, int ri,int b,final List<Integer> A){
        while(li<=ri){
            
            int mid=(li+ri)/2;
            if(A.get(mid)==b){
                return mid;
            }
            if(A.get(mid)>b){
                ri=mid-1;
            }else
            if(A.get(mid)<b){
                li=mid+1;
            }
        }
        return -1;
    }
}
